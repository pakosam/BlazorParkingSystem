@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthStateService AuthState
@inject NavigationManager NavigationManager


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ParkingSystem</a>
        <button title="Navigation menu" class="navbar-toggler">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="nav-scrollable">
    <nav class="flex-column">
        @if (isLoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="parkings">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Parkings
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="employees">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Employees
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" @onclick="LogOut">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Logout
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="registration">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Registration
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Login
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {


    private bool isLoggedIn { get; set; }
    private Action? _authStateChangeHandler;



    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = await AuthState.IsLoggedInAsync();
        AuthState.OnChange += StateChanged;
    }

    private async void StateChanged()
    {
        isLoggedIn = await AuthState.IsLoggedInAsync();
        StateHasChanged();
    }

   
    private async Task LogOut()
    {
        await AuthState.LogOutAsync();
        NavigationManager.NavigateTo("/login");
    }

    public void Dispose()
    {
        AuthState.OnChange -= StateChanged;
    }
}
