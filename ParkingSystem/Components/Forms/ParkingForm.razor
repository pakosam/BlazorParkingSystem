@page "/add-parking"
@using ParkingSystem.Services;
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ApiService ApiService;
@inject AuthStateService AuthState

<h3>Add parking</h3>

@if (isSubmitting)
{
    <p>Submitting...</p>
}
else if (successMessage != null)
{
    <p class="text-success">@successMessage</p>
}
else if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}

<form @onsubmit="SubmitForm">
    <div>
        <label for="name">Parking Name</label>
        <input id="name" @bind="parkingForm.Name" placeholder="Enter parking name" required />
    </div>

    <div>
        <label for="numOfPlaces">Number of Places</label>
        <input id="numOfPlaces" type="number" @bind="parkingForm.NumberOfPlaces" placeholder="Enter number of places" required />
    </div>

    <div>
        <label for="openingTime">Opening Time</label>
        <input id="openingTime" type="time" @bind="parkingForm.OpeningTime" required />
    </div>

    <div>
        <label for="closingTime">Closing Time</label>
        <input id="closingTime" type="time" @bind="parkingForm.ClosingTime" required />
    </div>

    <div>
        <label for="pricePerHour">Price per Hour</label>
        <input id="pricePerHour" type="number" @bind="parkingForm.PricePerHour" placeholder="Enter price per hour" required />
    </div>

    <button type="submit">Submit</button>
</form>

@code {
    private ParkingFormModel parkingForm = new ParkingFormModel();
    private bool isSubmitting = false;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthorization();
    }

    private async Task CheckAuthorization()
    {
        if (!await AuthState.IsLoggedInAsync())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task SubmitForm()
    {
        isSubmitting = true;
        successMessage = null;
        errorMessage = null;

        try
        {
            var response = await ApiService.MakeRequestAsync(
                "https://localhost:7185/api/Parkings",
                HttpMethod.Post,
                parkingForm // Pass the form object directly
            );

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Parking added successfully!";
                parkingForm = new ParkingFormModel(); // Clear the form
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to add parking. Error: {errorResponse}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }


    public class ParkingFormModel
    {
        public string Name { get; set; }
        public int NumberOfPlaces { get; set; }
        public TimeOnly OpeningTime { get; set; }
        public TimeOnly ClosingTime { get; set; }
        public int PricePerHour { get; set; }
    }
}