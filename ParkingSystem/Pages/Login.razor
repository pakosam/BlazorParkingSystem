@page "/login"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AuthStateService AuthState // Service to manage login state

<h3>Login</h3>

@if (isSubmitting)
{
    <p>Submitting...</p>
}
else if (successMessage != null)
{
    <p class="text-success">@successMessage</p>
}
else if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}

<form @onsubmit="SubmitForm">
    <div>
        <label for="username">Username</label>
        <input id="username" @bind="loginForm.Username" placeholder="Enter username" required />
    </div>

    <div>
        <label for="password">Password</label>
        <input id="password" type="password" @bind="loginForm.Password" placeholder="Enter password" required />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Submit</button>
</form>

@code {
    private LoginModel loginForm = new LoginModel();
    private bool isSubmitting = false;
    private string? successMessage;
    private string? errorMessage;

    private async Task SubmitForm()
    {
        isSubmitting = true;
        successMessage = null;
        errorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7185/api/Authorizations/login", loginForm);

            if (response.IsSuccessStatusCode)
            {
                // Deserialize the response to get the token
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var tokenResponse = System.Text.Json.JsonSerializer.Deserialize<TokenResponse>(jsonResponse);
                var token = tokenResponse?.token;

                if (!string.IsNullOrEmpty(token))
                {
                    // Store the token in localStorage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                    successMessage = "Login successful!";
                    // NavigationManager.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Failed to retrieve authentication token.";
                }
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class TokenResponse
    {
        public string token { get; set; }
    }
}
