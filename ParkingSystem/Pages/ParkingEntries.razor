@page "/parkingEntries/{ParkingId:int}"
@using ParkingSystem.Services
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ApiService ApiService
@inject AuthStateService AuthState

<PageTitle>Parking entries</PageTitle>

<div class="add-parking-entry-part">
    <h1>Parking entries</h1>
</div>

@if (parkingEntries == null)
{
    <p>Loading...</p>
}
else
{
    <div class="add-button">
        <button class="add-btn" @onclick="NavigateToAddEntry">Add new entry</button>
    </div>
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Registration Plate</th>
                    <th>Ticket Takeover</th>
                    <th>Ticket Expiration</th>
                    <th>Parking ID</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entry in parkingEntries)
                {
                    <tr>
                        <td>@entry.Id</td>
                        <td>@entry.RegistrationPlate</td>
                        <td>@entry.TicketTakeover</td>
                        <td>@entry.TicketExpiration</td>
                        <td>@entry.ParkingId</td>
                        <td>
                            <button class="update-btn" @onclick="() => NavigateToUpdateLeave(entry.Id)">Update</button>
                        </td>
                        <td>
                            <button class="delete-btn" @onclick="() => NavigateToDeleteLeave(entry.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    public int ParkingId { get; set; }

    private List<ParkingEntry>? parkingEntries;

    protected override async Task OnInitializedAsync()
    {
        if (!await AuthState.IsLoggedInAsync())
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        var response = await ApiService.MakeRequestAsync($"https://localhost:7185/api/ParkingEntries/{ParkingId}/entries", HttpMethod.Get);
        if (response.IsSuccessStatusCode)
        {
            parkingEntries = await response.Content.ReadFromJsonAsync<List<ParkingEntry>>();
        }
        // Fetch the parking entries for the given ParkingId
        // parkingEntries = await Http.GetFromJsonAsync<List<ParkingEntry>>($"https://localhost:7185/api/ParkingEntries/{ParkingId}/entries");
    }

    private void NavigateToAddEntry()
    {
        NavigationManager.NavigateTo($"/parkingEntries/{ParkingId}/addParkingEntry");
    }

    private void NavigateToUpdateLeave(int id)
    {
        NavigationManager.NavigateTo($"/updateParkingLeave/{id}");
    }

    private void NavigateToDeleteLeave(int id)
    {
        NavigationManager.NavigateTo($"/deleteParkingLeave/{id}");
    }

    public class ParkingEntry
    {
        public int Id { get; set; }
        public string RegistrationPlate { get; set; }
        public DateTime TicketTakeover { get; set; }
        public DateTime? TicketExpiration { get; set; }
        public int ParkingId { get; set; }
    }
}
