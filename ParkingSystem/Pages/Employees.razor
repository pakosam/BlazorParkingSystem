@page "/employees"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Employees</PageTitle>

<div class="add-employee-part">
    <h1>Employees</h1>
    <button class="add-btn" @onclick="NavigateToAddEmployee">Add new employee</button>
</div>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Full name</th>
                <th>Birth date</th>
                <th>Parking ID</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.FullName</td>
                    <td>@employee.BirthDate</td>
                    <td>@employee.parkingId</td>
                    <td>
                        <a href="./updateEmployee.html"><button class="update-btn">Update</button></a>
                    </td>
                    <td>
                        <a href="./deleteEmployee.html"><button class="delete-btn">Delete</button></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int parkingId { get; set; }

    private Employee[]? employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await Http.GetFromJsonAsync<Employee[]>("https://localhost:7185/api/Employees");
    }

    private void NavigateToAddEmployee()
    {
        NavigationManager.NavigateTo($"/add-employee");
    }

    public class Employee
    {
        public int Id { get; set; }
        public string FullName { get; set; }
        public DateOnly BirthDate { get; set; }
        public int parkingId { get; set; }
    }
}
